---------------------------------------------------
Adding a local repository to GitHub with GitHub CLI

https://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/adding-locally-hosted-code-to-github#adding-a-local-repository-to-github-with-github-cli
---------------------------------------------------
Updating the repo with new stuff

1) Make changes (like this change lol)
2)  "NEW COMMIT NOTE HERE"
3) git push
Bingo! sweet. This syncs with an existing repo on github.

(commit and push to development and then pull request to main (see below)). 
---------------------------------------------------

I am only using main branch. This is bad practice. Conform to https://www.datree.io/resources/github-best-practices:



0 – Don’t git push straight to master

Regardless if you use Gitflow or any other git branching model, it is always a good idea to turn on git branch protection to prevent direct commits and ensure your main branch code is deployable at all times. All commits should be pushed to master through pull requests.

Protected branches
You can protect important branches by setting branch protection rules, which define whether collaborators can delete or force push to the branch and set requirements for any pushes to the branch, such as passing status checks or a linear commit history. 
- 
// Lets leave this alone for now. 

// Lts create a new branch 'development' under 'main'. I did this on github ui. 

// Switch to branch > make changes > push to development > pull request to master > merge > check out github ui. 

➜  github_best_practice git:(main) git checkout development
error: pathspec 'development' did not match any file(s) known to git
➜  github_best_practice git:(main) git pull
From https://github.com/robsub/github_best_practice
 * [new branch]      development -> origin/development
Already up to date.
➜  github_best_practice git:(main) git checkout development
branch 'development' set up to track 'origin/development'.
Switched to a new branch 'development'
➜  github_best_practice git:(development)




1 – Don’t commit code as an unrecognized author




2 – Define code owners for faster code reviews





3 – Don’t leak secrets into source control




4 – Don’t commit dependencies into source control (source control is available in vscode ui)



5 – Don’t commit local config files into source control


6 – Create a meaningful git ignore file
A .gitignore file is a must in each repository to ignore predefined files and directories. It will help you to prevent secret keys, dependencies and many other possible discrepancies in your code. You can choose a relevant template from Gitignore.io to get started quickly.

// For sensetive stuff. 


7 – Archive dead repositories





8 – Lock package version - Your manifest file contains information about all packages and dependencies in your project and their versions. The best practice is to specify a version or version range for every package and dependency listed in the manifest. Otherwise, you can’t be sure which version will get installed during the next build, and consequently your code may break.

// This sounds useful. -- 
"If you're collaborating on a shared project with multiple developers, and you want to ensures that installations remain identical for all developers and environments, you need to use package-lock. json . package-lock. json is automatically generated for any operations where npm modifies either package."



9 – Specify standard package versions
Even when everyone on your team are using the same packages, reusing code and tests across different projects can still be difficult if the packages are of different versions.

If you have a package that is used in multiple projects, try at a minimum to use the same major version of the package.





10 - Leverage task list
Tasks lists provide a way for you totrack to-dos directly within comments, issues, and even MarkDownfiles (*.MD) within your repository (users must have write access to therepository to make changes to MarkDownfiles).

Tasks lists provide an excellent way tocapture a high-level overview of a task or issue, as well as keep othersupdated on its state. Make sure to take advantage of this powerful new feature!

Checklist Gif
11 - Use a branch naming convention
Adopting a consistent branch naming convention is essential to keeping your repository organized as your team grows in size. An efficient naming convention will allow you to keep merge conflicts at a minimum while ensuring your developers are as productive as possible.

While there are many branch naming conventions, one of the most popular ones is known as git flow:

Timeline
12 - Delete stale branches
Every time one branch is merged into another, the branch that is merged in becomes stale, assuming further work isn’t being done in it.

While it may seem useful or even necessary to keep the extra data on hand, the reality is that stale branches are abandoned 98% of the time and simply clutter up your project.

Even if you delete a branch when you shouldn’t have, you can restore it - and if you don’t trust GitHub’s restore feature,  chances are it’s safe on somebody’s computer, thanks to the magic of distributed versioning.

Don’t be a branch hoarder: delete your stale branches.

Branch to Delete Gif
13 - Keep branches up to date
Let’s say you’ve finally completed some work on a long-outstanding branch and you’re ready to merge it into master. You pull from remote, hit merge, and suddenly you’re faced with a barrage of merge conflicts.

What happened?

You failed to keep your branch up-to-date with the branch you’re attempting to merge into. Lots of commits went by and some conflicted with your changes... now you’re faced with spending time and energy resolving an unnecessary amount merge conflicts.

The best practice here is to ensure that you’re consistently merging your base branch into your current branch as you work, especially if it’s a long-outstanding branch.

14 - Remove inactive GitHub members
While it might seem obvious, it’s worth mentioning in a comprehensive list of best practices... Be sure to remove contributors from your organization that are no longer contributing to your codebase.

If you remove somebody from your organization for any reason, revoke their GitHub access immediately as well. Even in completely amicable situations, it’s better safe than sorry!

15 - Enable security alerts
Security alerts are another feature new to GitHub. You can read about them here, but the gist is that GitHub now tracks reported security vulnerabilities in some dependencies and will even suggest fixes for you.

This is turned on automatically for all public repositories, but if your repository is private, you’ll need to opt in manually.

// Done on a repo per repo basis. Enable if I have dependencies. 

---------------------------------------------------